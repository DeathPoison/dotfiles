##[
 Script: buildModules
 ----------------

 This script will generate neccessary files to import all Modules in the Installer

 Creates: **importModules.nim**::
   MODULES.add([MODULENAME])
   import "[MODULEPATH]"

 Creates: **installModules.nim**::
   discard [MODULENAME].install( DotfileModuleAttributes( user: USER, path: PATH, home: HOME, pwd: PWD ) )

 Creates: **uninstallModules.nim**::
   discard [MODULENAME].uninstall( DotfileModuleAttributes( user: USER, path: PATH, home: HOME, pwd: PWD ) )

 ::
   v0.1 - 01.05.2018 - 22:30
        - limited imports
        - replaced with by nre

 :Author: **LimeBlack ~ David Crimi**
 :Useful:
   `Installer <installer.html>`_
   `importModules <importModules.html>`_
   `installModules <installModules.html>`_

]##

from nre import replace, re
from times import format, getTime, getLocalTime
from os import walkFiles

let DEBUG: bool = false
var importDocString: string = """##[

 AutoGenerated: importModules
 ----------------------------

 Autogenerated Script to import all Modules

 :Author: **LimeBlack ~ David Crimi**
 :GeneratedBy: `buildModules <buildModules.html>`_
"""
var installDocString: string = """##[

 AutoGenerated: installModules
 -----------------------------

 Autogenerated script to install all Modules

 :Author: **LimeBlack ~ David Crimi**
 :GeneratedBy: `buildModules <buildModules.html>`_
"""
var uninstallDocString: string = """##[

 AutoGenerated: uninstallModules
 -------------------------------

 Autogenerated script to uninstall all Modules

 :Author: **LimeBlack ~ David Crimi**
 :GeneratedBy: `buildModules <buildModules.html>`_
"""
let timestamp: string = format( getLocalTime(getTime()), "yyyy-MM-dd'_'HH:mm" )
importDocString    = importDocString    & " :Timestamp: " & timestamp & "\n" & "]##" & "\n"
installDocString   = installDocString   & " :Timestamp: " & timestamp & "\n" & "]##" & "\n"
uninstallDocString = uninstallDocString & " :Timestamp: " & timestamp & "\n" & "]##" & "\n"

when isMainModule:

  var MODULES: seq[ string ] = @[] # hold list of available modules

  var argumentString: string = "user: USER, path: PATH, home: HOME, pwd: PWD, arch: ARCH, dist: DIST, pkg_mng: PKG_MNG, silent: SILENT, force: FORCE"
  var installContent: string
  var uninstallContent: string

  let importFile    = open("importModules.nim",     fmWrite)
  let importCfgFile = open("importModules.nim.cfg", fmWrite)
  let installFile   = open("installModules.nim",    fmWrite)
  let uninstallFile = open("uninstallModules.nim",  fmWrite)

  # create: import config file
  importCfgFile.write( "--threads:on\n-d:release" )
  importCfgFile.close

  # create: import file
  importFile.write( importDocString )
  for file in walkFiles("../modules/*.nim"):

    # create module cfg file
    let moduleCfgFile = open( file & ".cfg", fmWrite )
    moduleCfgFile.write( "--threads:on" )
    moduleCfgFile.close

    var moduleName: string = replace(file, re"../modules/*([a-zA-Z0-9]*).nim$", "$1")
    MODULES.add( moduleName )
    importFile.write("MODULES.add(\"" & moduleName & "\")\n")
    importFile.write("import " & file[0..^5] & "\n\n")

  importFile.close

  # create: un/installModules.nim
  installFile.write( installDocString )
  uninstallFile.write( uninstallDocString )
  for module in MODULES:
    installContent   = "discard " & module & ".install(DotfileModuleAttributes(" & argumentString & "))"
    uninstallContent = "discard " & module & ".uninstall(DotfileModuleAttributes(" & argumentString & "))"
    if DEBUG:
      echo "Will add to installModules.nim: "   & installContent
      echo "Will add to uninstallModules.nim: " & uninstallContent
    installFile.write( installContent & "\n" )
    uninstallFile.write( uninstallContent & "\n" )

  installFile.close
  uninstallFile.close
